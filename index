<!DOCTYPE html>
<html lang="ja">
    <head>
        <meta charset="UTF-8">
        <script src="https://cdn.jsdelivr.net/npm/vue"></script>
        <script src="https://cdn.jsdelivr.net/npm/axios@0.24.0/dist/axios.min.js"></script>
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-giJF6kkoqNQ00vy+HMDP7azOuL0xtbfIcaT9wjKHr8RbDVddVHyTfAAsrekwKmP1" crossorigin="anonymous">

        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/js/bootstrap.bundle.min.js" integrity="sha384-ygbV9kiqUc6oa4msXn9868pTtWMgiQaeYH7/t7LECLbyPA2x65Kgf80OJFdroafW" crossorigin="anonymous"></script>
        <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js" integrity="sha384-q2kxQ16AaE6UbzuKqyBE9/u/KzioAlnx2maXQHiDX9d4/zp8Ok3f+M7DPm+Ib6IU" crossorigin="anonymous"></script>
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/js/bootstrap.min.js" integrity="sha384-pQQkAEnwaBkjpqZ8RU1fF1AKtTcHJwFl3pblpTlHXybJjHpMYo79HY3hIi4NKxyj" crossorigin="anonymous"></script>
        
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <title>openBDで検索！</title>
    </head>
    
    <body >
    <h1>openBDで検索！</h1>
    
    <div id="app"  class="container">
        <div class="row">
            <p>ISBNを入れてね</p>
            <input type="text" value=""
                class="col-8"
                v-model="ISBN" 
                @keydown.enter="isbnSearch">
            </input>
            <button v-on:click="isbnSearch()"
                    class="col-4"
            >検索！</button>
        </div>
        <div  class="row">
            <div>
                <p > タイトル　：{{ book.title }} </p>
                <p> ISBN 　：{{ book.isbn }} </p>
                <p> 著者　：{{ book.author }} </p>
                <p> 出版社　：{{ book.publisher }} </p>
            </div>
            <div>
                <img :src= "book.coverURL" >
            </div>
            <div class="column col-12">
                <p> 詳細　<br>{{ book.discription}} </p>
                <p> 目次　<br>{{ book.contents}} </p>
            </div>
        </div>
        <div  class="row">
            <canvas id="preview"></canvas>
        </div>
        <textarea id="jan"   class="row" ></textarea>
    </div>
    
    
    </body>
    
    <script>
        const app = new Vue({
            el: '#app',
            data: {
                ISBN: '',
                book: {
                    text: '',
                    isbn: '',
                    title: '',
                    author: '',
                    coverURL: 'https://via.placeholder.com/200x100',
                    publisher:'',
                    discription: '',            //書籍の説明
                    contents: ''               //書籍の目次
                }
                },
            methods: {
                intialize: function(){
                    this.book.isbn = '';
                    this.book.title = '';
                    this.book.author = '';
                    this.book.coverURL = 'https://via.placeholder.com/200x100';
                    this.book.publisher = '';
                    this.book.discription = '';
                    this.book.contents = '';
                },
                isbnSearch: function(){
                    //alert(this.ISBN);
                    //書誌情報をopenBDから取得
                    axios.get("https://api.openbd.jp/v1/get?isbn=" + this.ISBN + '&pretty')
                    .then(response => {
                        //既存の表示内容を消去
                        this.intialize();

                        //受け取った書誌情報の入力
                        this.book.isbn = response.data[0].summary.isbn;
                        this.book.title = response.data[0].summary.title;
                        this.book.author = response.data[0].summary.author;
                        this.book.coverURL = response.data[0].summary.cover;
                        this.book.publisher = response.data[0].summary.publisher;
                        this.book.discription = response.data[0].onix.CollateralDetail.TextContent[1].Text;
                        this.book.contents = response.data[0].onix.CollateralDetail.TextContent[2].Text;

                        //検証用
                        console.log(response.data[0]);
                        console.log(response.status);
                        },
                    )
                    .catch(error => {
                        //既存の表示内容を消去
                        this.intialize();
                        this.book.isbn = this.ISBN + '　エラー：書籍が見つかりませんでした。ISBNを確認してください';
                        
                        //検証用
                        console.log(error.status);
                        }
                    )
                    this.ISBN = '';
                }
            }
        });

        var DetectedCount=0,DetectedCode="";
    var video,tmp,tmp_ctx,jan,prev,prev_ctx,w,h,mw,mh,x1,y1;
    window.addEventListener('load',function(event){
    video=document.createElement('video');
    video.setAttribute("autoplay","");
    video.setAttribute("muted","");
    video.setAttribute("playsinline","");
    video.onloadedmetadata = function(e){video.play();};
    prev=document.getElementById("preview");
    prev_ctx=prev.getContext("2d");
    tmp = document.createElement('canvas');
    tmp_ctx = tmp.getContext("2d");
    jan=document.getElementById("jan");

    //カメラ使用の許可ダイアログが表示される
    navigator.mediaDevices.getUserMedia(
        //マイクはオフ, カメラの設定   背面カメラを希望する 640×480を希望する
        {"audio":false,"video":{"facingMode":"environment","width":{"ideal":640},"height":{"ideal":480}}}
    ).then( //許可された場合
        function(stream){
        video.srcObject = stream;
        //0.5秒毎にスキャンする
        setTimeout(Scan,500,true);
        }
    ).catch( //許可されなかった場合
        function(err){jan.value+=err+'\n';}
    );

    function Scan(first){
        if(first){
        //選択された幅高さ
        w=video.videoWidth;
        h=video.videoHeight;

        //画面上の表示サイズ
        prev.style.width=(w/2)+"px";
        prev.style.height=(h/2)+"px";
        
        //内部のサイズ
        prev.setAttribute("width",w);
        prev.setAttribute("height",h);
        mw=w*0.5;
        mh=w*0.2;
        x1=(w-mw)/2;
        y1=(h-mh)/2;
        }
        
        prev_ctx.drawImage(video,0,0,w,h);
        prev_ctx.beginPath();
        prev_ctx.strokeStyle="rgb(255,0,0)";
        prev_ctx.lineWidth=2;
        prev_ctx.rect(x1,y1,mw,mh);
        prev_ctx.stroke();
        tmp.setAttribute("width",mw);
        tmp.setAttribute("height",mh);
        tmp_ctx.drawImage(prev,x1,y1,mw,mh,0,0,mw,mh);
        tmp.toBlob(function(blob){
            let reader = new FileReader();
            reader.onload=function(){
                let config={
                decoder: {
                    readers: ["ean_reader","ean_8_reader"],
                    multiple: false, //同時に複数のバーコードを解析しない
                },
                locator:{patchSize:"large",halfSample:false},
                locate:false,
                src:reader.result,
                };
                Quagga.decodeSingle(config,function(){});
            }
            reader.readAsDataURL(blob);
            }
        );

        setTimeout(Scan,50,false);
    }

            Quagga.onDetected(function (result) {
            //読み取り誤差が多いため、3回連続で同じ値だった場合に成功とする
            if(DetectedCode==result.codeResult.code){
                DetectedCount++;
            }else{
                DetectedCount=0;
                DetectedCode=result.codeResult.code;
            }
            if(DetectedCount>=3){
                console.log(result.codeResult.code);
                jan.value+=result.codeResult.code+'\n';
                jan.scrollTop=jan.scrollHeight;
                app.ISBN = result.codeResult.code;
                DetectedCode='';
                DetectedCount=0;
            }
            });
    });
    </script>
    <style type="text/css">
    p {
        box-sizing: content-box;
    }
    .selector-for-some-widget {
         box-sizing: content-box;
    }
    </style>

    </html> 
